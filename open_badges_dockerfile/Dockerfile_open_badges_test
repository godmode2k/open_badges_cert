# Dockerfile
#
# Open Badges test
#  - hjkim, 2024.06.19
#
#
# ----------------------------------------------
# EDIT
# ----------------------------------------------
# 1. MKCERT domain
# $ mkcert example.com "*.example.com" localhost 127.0.0.1 ::1
#
# 2. apache2 conf file here (nginx, node, ..., if you want)
# filename: 000-ssl.conf
# ...
# SSLCertificateFile	/etc/ssl/example.com+4.pem
# SSLCertificateKeyFile /etc/ssl/example.com+4-key.pem
#
#
# ----------------------------------------------
# build
# ----------------------------------------------
# $ sudo docker image prune
# $ sudo docker build -f Dockerfile_open_badges_test -t open_badges_test:1.0 .
# $ sudo docker builder prune
#
# or
#
# $ sudo docker build -f Dockerfile_open_badges_test -t open_badges_test:1.0 . && sudo docker image prune && sudo docker builder prune
#
#
# ----------------------------------------------
# run
# ----------------------------------------------
# 8080:80: http (default: apache2)
# 8081:443: https (default: apache2)
# 8082:81: tmp
# $ sudo docker run --rm -it -p 8080:80 -p 8081:443 -p 8082:81 -v /home/test/test_open_badges/shared_open_badges:/work --name test_open_badges open_badges_test:1.0
#
#
# ----------------------------------------------
# NOTE
# ----------------------------------------------
# 1. update-ca-certificates
# HOST PC (not a container)
# copy *.pem from container to (host-pc):/etc/ssl/
#
# MUST rename .pem to .crt
# copy (public-key).pem to (host-pc):/etc/ssl/(public-key).crt
#
# checks *.pem filename
# (host-pc) $ sudo docker cp (container-id):/root/example.com+4.pem /etc/ssl/
# (host-pc) $ sudo docker cp (container-id):/root/example.com+4-key.pem /etc/ssl/
# (host-pc) $ sudo cp /etc/ssl/example.com+4.pem /usr/local/share/ca-certificates/example.com+4.crt
# (host-pc) $ sudo update-ca-certificates
#
#
# 2. Node.js
# SEE: https://github.com/FiloSottile/mkcert
#
# $ sudo export NODE_EXTRA_CA_CERTS="$(mkcert -CAROOT)/rootCA.pem"
# $ sudo node <app.js>
#
# for docker-compose (for node.js, did:web here...)
# https://github.com/decentralized-identity/universal-resolver/blob/main/docker-compose.yml
# docker-compose.yml {
#version: "3.6"
#
#networks:
#  default:
#    name: universal-resolver
#
#services:
#
#  ...
#  uni-resolver-driver-did-uport:
#    image: uport/uni-resolver-driver-did-uport:5.0.0
#    ports:
#      - "8083:8081"
#    environment:
#      NODE_EXTRA_CA_CERTS: /root/rootCA.pem
#...
#}
# $ sudo docker-compose -f docker-compose.yml up -d
# $ sudo docker cp $(mkcert -CAROOT)/rootCA.pem (container_id: uport/uni-resolver-driver-did-uport:5.0.0):/root
# $ sudo docker stop (container_id: uport/uni-resolver-driver-did-uport:5.0.0)
# $ sudo docker start (container_id: uport/uni-resolver-driver-did-uport:5.0.0)
#



FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive


RUN apt-get clean && rm -fr /var/lib/apt/lists/*
RUN apt-get update

# ------------------------------------------
# Apache2, NginX, Node.js, PHP, MariaDB,
# ------------------------------------------
RUN apt-get install -y build-essential python3 python3-pip vim jq
RUN apt-get install -y wget curl net-tools libnss3-tools
RUN apt-get install -y apache2 nginx
RUN apt-get install -y libapache2-mod-php php7.4 php7.4-common php7.4-curl php7.4-gmp php7.4-json php7.4-mysql php7.4-readline
#RUN apt-get install -y git openjdk-8-jdk-headless default-jre tomcat9 tomcat9-admin
#RUN apt-get install -y mysql-server
RUN apt-get install -y mariadb-server

RUN cd $HOME && wget https://nodejs.org/dist/v20.15.0/node-v20.15.0-linux-x64.tar.xz && \
    tar xJvf node-v20.15.0-linux-x64.tar.xz && \
    echo 'export PATH=$HOME/node-v20.15.0-linux-x64/bin:$PATH' >> $HOME/.profile && \
    echo 'export PATH=$HOME/node-v20.15.0-linux-x64/bin:$PATH' >> $HOME/.bashrc



# ------------------------------------------
# MKCERT
# https://github.com/FiloSottile/mkcert
# ------------------------------------------
# download mkcert
# https://github.com/FiloSottile/mkcert/releases
RUN cd $HOME && \
    wget https://github.com/FiloSottile/mkcert/releases/download/v1.4.4/mkcert-v1.4.4-linux-amd64 && \
    chmod 755 mkcert-v1.4.4-linux-amd64 && \
    ln -s mkcert-v1.4.4-linux-amd64 mkcert && \
# creates: rootCA.pem, rootCA-key.pem
    $HOME/mkcert -install && \
# prints pem path
# default: $HOME/.local/share/mkcert
    $HOME/mkcert -CAROOT && \
# sign
# output:
# example.com+4.pem
# example.com+4-key.pem
# +4: example.com + 4("*.example.com" localhost 127.0.0.1 ::1)
    $HOME/mkcert example.com "*.example.com" localhost 127.0.0.1 ::1 && \
# copy *.pem to ...
    cp $HOME/*.pem /etc/ssl/ && \
# copy example.com+4.pem to example.com+4.crt
    cp $(ls *.pem | grep -v "key") $(echo $(ls *.pem | grep -v "key") | sed 's/.pem/.crt/') && \
# copy *.crt to /usr/local/share/ca-certificates/
    cp *.crt /usr/local/share/ca-certificates/ && \
# updates
    update-ca-certificates


# (container, host-pc) /etc/hosts
# (ADD)
#x.x.x.x    www.example.com
#RUN echo 'x.x.x.x    www.example.com' >> /etc/hosts



# ------------------------------------------
# Apache
# ------------------------------------------
# Apache2 SSL
# /etc/apache2/sites-available
# $ sudo cp default-ssl.conf 000-ssl.conf
# $ sudo vim /etc/apache2/sites-available/000-ssl.conf
#<VirtualHost _default_:443>
##<VirtualHost *:443>
#    DocumentRoot "/var/www/example"
#    #ServerName example.com:443
#
#    SSLEngine on
#    SSLCertificateFile	/etc/ssl/example.com+4.pem
#    SSLCertificateKeyFile /etc/ssl/example.com+4-key.pem
#    ...
#</VirtualHost>
COPY 000-ssl.conf /etc/apache2/sites-available
RUN a2enmod ssl
RUN a2ensite 000-ssl.conf
RUN service apache2 restart



# ------------------------------------------
# NginX
# ------------------------------------------
#COPY nginx.conf /etc/nginx.conf
#RUN service nginx restart



# ------------------------------------------
# Node.js
# ------------------------------------------
# $ vim server.js
#const https = require('https');
#const fs = require('fs');
#
#const options = {
#    key: fs.readFileSync('/etc/ssl/example.com+4-key.pem'),
#    cert: fs.readFileSync('/etc/ssl/example.com+4.pem'),
#};
# 
#https.createServer(options, (req, res) => {
#    // ...
#}).listen(3000);



# ------------------------------------------
# config: tomcat9
# ------------------------------------------
# (Optional)
#COPY cloud_service/default/tomcat9/* /<tomcat9 path: /usr/share/tomcat9/bin>
#COPY cloud_service/default/tomcat9/* /<tomcat9 path: /usr/share/tomcat9/conf>
# edit default webapps root path
#COPY cloud_service/default/tomcat9/* /<tomcat9 path: /var/lib/tomcat9/conf>

# (Optional)
#RUN ln -s /var/lib/tomcat9/conf /usr/share/tomcat9
#RUN ln -s /var/lib/tomcat9/logs /usr/share/tomcat9

# Tomcat9 shutdown port
#RUN sed -i -e 's/<Server\ port=\"-1\"\ shutdown=\"SHUTDOWN\">/<Server\ port=\"8081\"\ shutdown=\"SHUTDOWN\">/g' /usr/share/tomcat9/conf/server.xml

# (Optional)
# Add: /usr/share/tomcat9/conf/server.xml
# <Context docBase="<project-name>" path="/" reloadable="true" source="org.eclipse.jst.jee.server:project-name"/>
#RUN sed -i -e '0,/unpackWARs=\"true\"\ autoDeploy=\"true\">/!b;//a\<Context\ docBase=\"PROJECT-NAME\"\ path=\"/\"\ reloadable=\"true\"\ source=\"org.eclipse.jst.jee.server:PROJECT-NAME\"/>' /usr/share/tomcat9/conf/server.xml
#COPY ./PROJECT-NAME.war /usr/share/tomcat9/webapps/



# ------------------------------------------
# Database: MariaDB
# ------------------------------------------
RUN sed -i -e 's/^bind-address/#&/' /etc/mysql/mariadb.conf.d/50-server.cnf
#
#COPY ./PROJECT-NAME.sql /root
#RUN service mysql restart && mysql -u root --password="" < /root/PROJECT-NAME.sql

# ------------------------------------------
# Database: MySQL
# ------------------------------------------
# You need to specify one of the following as an environment variable:
# MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD, MYSQL_RANDOM_ROOT_PASSWORD
# $ docker run -d -e MYSQL_ROOT_PASSWORD="..." -p 33060:3306 mysql:latest
#
#RUN sed -i -e 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf
#RUN sed -i -e 's/^mysqlx-bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf
#
#COPY ./PROJECT-NAME.sql /root
#RUN service mysql restart && mysql -u root --password="" < /root/PROJECT-NAME.sql



# ------------------------------------------
# Vim
# ------------------------------------------
RUN echo '\n\n\n\n\n \
set ts=4\n \
set shiftwidth=4\n \
set expandtab\n \
set cindent\n \
set nu\n \
"set autoindent\n \
set smartindent\n \
set nohlsearch\n \
set noswf\n \
set nobackup\n \
set history=0\n \
set viminfo=\n\n\n \
' >> /etc/vim/vimrc



# ------------------------------------------
# ENTRYPOINT
# ------------------------------------------
# run apache2, tomcat9 (without systemctl here)
#ENTRYPOINT bash
#ENTRYPOINT /usr/share/tomcat9/bin/startup.sh && service apache2 restart
#ENTRYPOINT /usr/share/tomcat9/bin/startup.sh && service mysql restart && apachectl -D FOREGROUND
#ENTRYPOINT /usr/share/tomcat9/bin/startup.sh && apachectl -D FOREGROUND
#ENTRYPOINT service mysql restart && tail -f /dev/null
#ENTRYPOINT tail -f /dev/null
#
# Tomcat9, MySQL(MariaDB), Apache2
#ENTRYPOINT /usr/share/tomcat9/bin/startup.sh && service mysql restart && apachectl -D FOREGROUND
#
# MySQL(MariaDB), Apache2
#ENTRYPOINT service mysql restart && apachectl -D FOREGROUND
#
# default
ENTRYPOINT tail -f /dev/null



